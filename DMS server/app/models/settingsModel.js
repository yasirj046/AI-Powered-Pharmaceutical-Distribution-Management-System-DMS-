const mongoose = require("mongoose");

// Settings schema - Admin-only configuration for technical settings
const settingsSchema = new mongoose.Schema(
  {
    // Multi-tenant support
    companyId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Company',
      required: [true, 'Company ID is required'],
      unique: true, // Each company has one settings document
      index: true
    },
    // Company Information
    company: {
      name: {
        type: String,
        required: [true, 'Company name is required'],
        trim: true,
        maxlength: [200, 'Company name cannot exceed 200 characters'],
        default: 'Your Pharmaceutical Company'
      },
      address: {
        type: String,
        required: [true, 'Company address is required'],
        trim: true,
        maxlength: [500, 'Address cannot exceed 500 characters'],
        default: 'Your Company Address'
      },
      phone: {
        type: String,
        trim: true,
        maxlength: [20, 'Phone cannot exceed 20 characters']
      },
      email: {
        type: String,
        trim: true,
        lowercase: true,
        maxlength: [100, 'Email cannot exceed 100 characters']
      },
      license: {
        type: String,
        trim: true,
        maxlength: [50, 'License cannot exceed 50 characters']
      },
      taxId: {
        type: String,
        trim: true,
        maxlength: [50, 'Tax ID cannot exceed 50 characters']
      },
      logo: {
        type: String,
        trim: true // URL or base64 string
      }
    },

    // Financial Settings
    financial: {
      currency: {
        type: String,
        default: 'PKR',
        enum: ['PKR', 'USD', 'EUR', 'GBP'],
        required: true
      },
      currencySymbol: {
        type: String,
        default: 'Rs.',
        maxlength: [10, 'Currency symbol cannot exceed 10 characters']
      },
      decimalPlaces: {
        type: Number,
        default: 2,
        min: [0, 'Decimal places cannot be negative'],
        max: [4, 'Decimal places cannot exceed 4']
      },
      taxRate: {
        type: Number,
        default: 0,
        min: [0, 'Tax rate cannot be negative'],
        max: [100, 'Tax rate cannot exceed 100%']
      },
      defaultCreditDays: {
        type: Number,
        default: 30,
        min: [0, 'Credit days cannot be negative']
      }
    },

    // Email Configuration (Admin Only - Technical Settings)
    email: {
      provider: {
        type: String,
        enum: ['SMTP', 'GMAIL', 'OUTLOOK', 'SENDGRID', 'MAILGUN'],
        default: 'GMAIL'
      },
      host: {
        type: String,
        default: 'smtp.gmail.com',
        trim: true
      },
      port: {
        type: Number,
        default: 587,
        min: [1, 'Port must be positive'],
        max: [65535, 'Port cannot exceed 65535']
      },
      secure: {
        type: Boolean,
        default: false
      },
      username: {
        type: String,
        default: 'yasirjamil460@gmail.com',
        trim: true
      },
      password: {
        type: String,
        trim: true,
        select: false // Don't include in queries by default for security
      },
      fromAddress: {
        type: String,
        default: 'yasirjamil460@gmail.com',
        trim: true,
        lowercase: true
      },
      fromName: {
        type: String,
        default: 'DMS Notification System',
        trim: true
      }
    },

    // System Settings
    system: {
      timezone: {
        type: String,
        default: 'Asia/Karachi',
        trim: true
      },
      dateFormat: {
        type: String,
        default: 'DD/MM/YYYY',
        enum: ['DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD'],
        required: true
      },
      timeFormat: {
        type: String,
        default: '24',
        enum: ['12', '24'],
        required: true
      },
      enableAuditLog: {
        type: Boolean,
        default: true
      },
      autoBackup: {
        enabled: {
          type: Boolean,
          default: false
        },
        frequency: {
          type: String,
          enum: ['DAILY', 'WEEKLY', 'MONTHLY'],
          default: 'WEEKLY'
        },
        time: {
          type: String,
          default: '02:00', // 2:00 AM
          match: [/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Invalid time format (HH:MM)']
        }
      },
      maintenanceMode: {
        type: Boolean,
        default: false
      }
    },

    // Report Settings
    reports: {
      headerText: {
        type: String,
        default: 'Pharmaceutical Distribution Management System',
        trim: true,
        maxlength: [200, 'Header text cannot exceed 200 characters']
      },
      footerText: {
        type: String,
        default: 'Generated by DMS',
        trim: true,
        maxlength: [200, 'Footer text cannot exceed 200 characters']
      },
      showLogo: {
        type: Boolean,
        default: true
      },
      pageSize: {
        type: String,
        enum: ['A4', 'Letter', 'Legal'],
        default: 'A4'
      },
      orientation: {
        type: String,
        enum: ['portrait', 'landscape'],
        default: 'portrait'
      }
    },

    // ID Generation Information (Read-only display)
    idGeneration: {
      inventory: {
        info: {
          type: String,
          default: 'Format: INV-YYYYMMDD-### (e.g., INV-20250720-001)',
          trim: true
        }
      },
      invoice: {
        info: {
          type: String,
          default: 'Format: SI-YYYYMMDD-### (e.g., SI-20250720-001)',
          trim: true
        }
      },
      customer: {
        info: {
          type: String,
          default: 'Format: CUST-### (e.g., CUST-001)',
          trim: true
        }
      },
      brand: {
        info: {
          type: String,
          default: 'Format: BRD-### (e.g., BRD-001)',
          trim: true
        }
      }
    },

    // Application Version and Info
    version: {
      type: String,
      default: '1.0.0',
      trim: true
    },
    lastUpdated: {
      type: Date,
      default: Date.now
    },
    updatedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      default: null
    },
    isActive: {
      type: Boolean,
      default: true
    }
  },
  {
    timestamps: true,
    collection: 'settings',
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
  }
);

// Middleware to update lastUpdated field
settingsSchema.pre('save', function(next) {
  this.lastUpdated = new Date();
  next();
});

// Static method to get settings (singleton pattern)
settingsSchema.statics.getInstance = async function() {
  let settings = await this.findOne({ isActive: true });
  
  if (!settings) {
    // Create default settings if none exist
    settings = new this({});
    await settings.save();
  }
  
  return settings;
};

// Static method to update settings by category
settingsSchema.statics.updateSettings = async function(category, data, userId = null) {
  const settings = await this.getInstance();
  
  // Validate that category exists in schema
  const validCategories = ['company', 'financial', 'email', 'system', 'reports', 'idGeneration'];
  if (!validCategories.includes(category)) {
    throw new Error(`Invalid settings category: ${category}`);
  }
  
  if (settings[category]) {
    // Deep merge for nested objects
    Object.keys(data).forEach(key => {
      if (data[key] !== undefined) {
        if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
          settings[category][key] = { ...settings[category][key], ...data[key] };
        } else {
          settings[category][key] = data[key];
        }
      }
    });
  } else {
    settings[category] = data;
  }
  
  settings.lastUpdated = new Date();
  if (userId) {
    settings.updatedBy = userId;
  }
  
  return await settings.save();
};

// Get specific category
settingsSchema.statics.getCategory = async function(category) {
  const settings = await this.getInstance();
  return settings[category] || {};
};

// Get email configuration with password (admin only)
settingsSchema.statics.getEmailConfig = async function() {
  const settings = await this.findOne({ isActive: true }).select('+email.password');
  return settings ? settings.email : {};
};

// Index for performance
settingsSchema.index({ isActive: 1 });

module.exports = mongoose.model("Settings", settingsSchema);
